webpackJsonp([22003566706915],{226:function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var l=a(2),r=n(l),i=a(20),u=n(i),o=u.default.div.withConfig({displayName:"getting-started__Container"})(["width:50%;@media only screen and (max-width:1024px){width:100%;}"]),d=u.default.div.withConfig({displayName:"getting-started__Console"})(["background-color:#283646;padding:5px;color:white;margin:10px 0;border-radius:4px;"]),s=function(){return r.default.createElement(o,null,r.default.createElement("h1",null,"What is ",r.default.createElement("i",null,"pure"),"?"),r.default.createElement("i",null,"Pure")," is a library for functional programming in TypeScript. It's purpose is to allow developers to use popular patterns and abstractions that are available in most functional languages. It is also ",r.default.createElement("a",{href:"https://github.com/fantasyland/fantasy-land"},"Fantasy Land")," conformant.",r.default.createElement("h1",null,"Core values"),r.default.createElement("ul",null,r.default.createElement("li",null,r.default.createElement("b",null,"Elegant and developer-friendly API")," - ",r.default.createElement("i",null,"pure"),"'s design decisions are made with developer experience in mind.",r.default.createElement("i",null,"Pure")," doesn't try to change how you write TypeScript, instead it provides useful tools for making your code easier to read and maintain without resolving to hacks or scary type definitions."),r.default.createElement("li",null,r.default.createElement("b",null,"Type-safety")," - While ",r.default.createElement("i",null,"pure")," can be used in vanilla JavaScript, it's entirely written with TypeScript and type safety in mind. While TypeScript does a great job at preventing runtime errors, ",r.default.createElement("i",null,"pure")," goes a step further and provides utility functions for working with native objects like arrays in a type-safe manner."),r.default.createElement("li",null,r.default.createElement("b",null,"Emphasis on practical code")," - Higher-kinded types and other type-level features would be great additions to this library, but as of right now they don't have reasonable implementations in TypeScript. ",r.default.createElement("i",null,"Pure")," focuses on being a library that you can include in any TypeScript project and favors instance methods instead of functions, clean and readable type definitions instead of advanced type features and a curated API instead of trying to port over another language's standard library.")),r.default.createElement("h1",null,"How to start?"),r.default.createElement("i",null,"Pure")," is available as a package on npm. You can install it with a package manager of your choice:",r.default.createElement(d,null,"$ npm install pure-ts ",r.default.createElement("br",null),"$ yarn add pure-ts"),"On the left sidebar you can find all of ",r.default.createElement("i",null,"pure"),"'s contents, each page contains a guide on how to start using it. ",r.default.createElement("br",null),"You can start by visiting the page about ",r.default.createElement("a",{href:"/adts/Maybe"},"Maybe"),", one of the most popular data types.")};t.default=s,e.exports=t.default}});
//# sourceMappingURL=component---src-pages-getting-started-js-888e1e6ccd1d3fa19bbe.js.map