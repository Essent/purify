{"version":3,"sources":["webpack:///component---src-pages-guides-maybe-api-guide-js-1e9a093b21bc46cb86e2.js","webpack:///./src/pages/guides/maybe-api-guide.js"],"names":["webpackJsonp","226","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_styledComponents","_styledComponents2","_layout","_layout2","_HL","_HL2","_reactSyntaxHighlighter","_reactSyntaxHighlighter2","_googlecode","_googlecode2","Note","styled","div","withConfig","displayName","MethodName","a","MaybeApiGuide","props","createElement","location","href","language","style","highlightStyle"],"mappings":"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","file":"component---src-pages-guides-maybe-api-guide-js-1e9a093b21bc46cb86e2.js","sourcesContent":["webpackJsonp([98857381193334],{\n\n/***/ 226:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _styledComponents = __webpack_require__(9);\n\t\n\tvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\t\n\tvar _layout = __webpack_require__(22);\n\t\n\tvar _layout2 = _interopRequireDefault(_layout);\n\t\n\tvar _HL = __webpack_require__(59);\n\t\n\tvar _HL2 = _interopRequireDefault(_HL);\n\t\n\tvar _reactSyntaxHighlighter = __webpack_require__(25);\n\t\n\tvar _reactSyntaxHighlighter2 = _interopRequireDefault(_reactSyntaxHighlighter);\n\t\n\tvar _googlecode = __webpack_require__(30);\n\t\n\tvar _googlecode2 = _interopRequireDefault(_googlecode);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Note = _styledComponents2.default.div.withConfig({\n\t  displayName: 'maybe-api-guide__Note'\n\t})(['display:inline-block;background-color:#fcf4cd;border:0 solid #f7e070;border-left-width:8px;padding:10px;margin:10px 0;']);\n\t\n\tvar MethodName = _styledComponents2.default.a.withConfig({\n\t  displayName: 'maybe-api-guide__MethodName'\n\t})(['font-size:17px;font-weight:bold;color:#3b74d7;margin-top:5px;display:inline-block;text-decoration:none;&:hover{text-decoration:underline;}']);\n\t\n\tvar MaybeApiGuide = function MaybeApiGuide(props) {\n\t  return _react2.default.createElement(\n\t    _layout2.default,\n\t    { location: props.location },\n\t    _react2.default.createElement(\n\t      'h1',\n\t      null,\n\t      'Which Maybe method am I supposed to use now? (API guide)'\n\t    ),\n\t    'We\\'ve all been in that research phase where we\\'re still learning the API of library and deciding if it suits our usecases. ',\n\t    _react2.default.createElement('br', null),\n\t    'The purpose of this guide is to make that process easier by grouping all available methods for the Maybe data type.',\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      'Scenario #1 - I want to use Maybe but my codebase already has null/undefined all over the place'\n\t    ),\n\t    'One of purify\\'s main goals is great interoperability with existing code. That is why the API for Maybe is rich in utility methods for working with nullable values. ',\n\t    _react2.default.createElement('br', null),\n\t    _react2.default.createElement(\n\t      Note,\n\t      null,\n\t      'One might question the usage of Maybe (and purify) if you are still going to use nulls, there are already a lot of utility libraries like ramda and lodash that allow you to do that. ',\n\t      _react2.default.createElement('br', null),\n\t      'With purify you can start using ubiquitous data structures that come with a lot of literature and examples in various programming languages ',\n\t      _react2.default.createElement('br', null),\n\t      'without sacrificing coding style or ease of interop, that\\'s why using it instead of other libraries might be a good idea.'\n\t    ),\n\t    _react2.default.createElement('br', null),\n\t    _react2.default.createElement(\n\t      MethodName,\n\t      { href: '/adts/Maybe/#fromNullable' },\n\t      'Maybe.fromNullable'\n\t    ),\n\t    ' ',\n\t    '/ ',\n\t    _react2.default.createElement(\n\t      MethodName,\n\t      { href: '/adts/Maybe/#fromFalsy' },\n\t      'Maybe.fromFalsy'\n\t    ),\n\t    ' /',\n\t    ' ',\n\t    _react2.default.createElement(\n\t      MethodName,\n\t      { href: '/adts/Maybe/#fromPredicate' },\n\t      'Maybe.fromPredicate'\n\t    ),\n\t    ' ',\n\t    '/ ',\n\t    _react2.default.createElement(\n\t      MethodName,\n\t      { href: '/adts/Maybe/#encase' },\n\t      'Maybe.encase'\n\t    ),\n\t    _react2.default.createElement('br', null),\n\t    'These methods allow you to construct Maybe values from, as the names suggest, nullable and falsy values or in the case of the `encase` method - from a function that may throw an exception. ',\n\t    _react2.default.createElement('br', null),\n\t    '`fromPredicate` is on the list because it can be used to cover all kinds of complicated checks, for example:',\n\t    _react2.default.createElement(\n\t      _reactSyntaxHighlighter2.default,\n\t      { language: 'javascript', style: _googlecode2.default },\n\t      'const _ = Maybe.fromPredicate(x => x && x.length > 0, value)'\n\t    ),\n\t    _react2.default.createElement(\n\t      MethodName,\n\t      { href: '/adts/Maybe/#chainNullable' },\n\t      'chainNullable'\n\t    ),\n\t    _react2.default.createElement('br', null),\n\t    'Now that you have constructed your Maybe out of an optional value, you may want to transform it with a function that returns yet another optional value. ',\n\t    _react2.default.createElement('br', null),\n\t    'If you are already familiar with the ',\n\t    _react2.default.createElement(\n\t      _HL2.default,\n\t      null,\n\t      'chain'\n\t    ),\n\t    ' method (a.k.a.',\n\t    ' ',\n\t    _react2.default.createElement(\n\t      _HL2.default,\n\t      null,\n\t      'bind'\n\t    ),\n\t    ', ',\n\t    _react2.default.createElement(\n\t      _HL2.default,\n\t      null,\n\t      'flatMap'\n\t    ),\n\t    ' or ',\n\t    _react2.default.createElement(\n\t      _HL2.default,\n\t      null,\n\t      '>>='\n\t    ),\n\t    ') you may think of using it in combination with any of the methods mentioned above: ',\n\t    _react2.default.createElement('br', null),\n\t    _react2.default.createElement(\n\t      _reactSyntaxHighlighter2.default,\n\t      { language: 'javascript', style: _googlecode2.default },\n\t      'myMaybe.chain(x => Maybe.fromNullable(transform(x)))'\n\t    ),\n\t    'There\\'s nothing wrong with that approach, but there\\'s a helper method called `chainNullable` that does exactly the same thing ',\n\t    _react2.default.createElement('br', null),\n\t    'without you having to manually construct a Maybe out of the return value of the transformation function. ',\n\t    _react2.default.createElement('br', null),\n\t    _react2.default.createElement(\n\t      _reactSyntaxHighlighter2.default,\n\t      { language: 'javascript', style: _googlecode2.default },\n\t      'myMaybe.chainNullable(x => transform(x))\\n// or just straight up\\nmyMaybe.chainNullable(transform)'\n\t    ),\n\t    _react2.default.createElement(\n\t      MethodName,\n\t      { href: '/adts/Maybe/#extract' },\n\t      'extract'\n\t    ),\n\t    ' /',\n\t    ' ',\n\t    _react2.default.createElement(\n\t      MethodName,\n\t      { href: '/adts/Maybe/#extractNullable' },\n\t      'extractNullable'\n\t    ),\n\t    ' ',\n\t    '/ ',\n\t    _react2.default.createElement(\n\t      MethodName,\n\t      { href: '/adts/Maybe/#unsafeCoerce' },\n\t      'unsafeCoerce'\n\t    ),\n\t    _react2.default.createElement('br', null),\n\t    'Sometimes you have to interact with code that expects a nullable value, in that case you can just unwrap a Maybe down to a primitive value like null or undefined using the methods above. ',\n\t    _react2.default.createElement('br', null),\n\t    _react2.default.createElement(\n\t      Note,\n\t      null,\n\t      'Please note that while you may be tempted to wrap and unwrap manually every time you encounter a nullable value, ',\n\t      _react2.default.createElement('br', null),\n\t      'consider that code designed with Maybe in mind is easier to maintain and use in the long term. ',\n\t      _react2.default.createElement('br', null),\n\t      'Try to keep usage of the methods mentioned in this part of the guide low and only for compatibility reasons. ',\n\t      _react2.default.createElement('br', null),\n\t      'Don\\'t be afraid to start returning or expecing Maybe values in functions, you\\'ll notice some benefits you haven\\'t considered before!'\n\t    ),\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      'Scenario #2 - I\\'m not sure how to check if a value exists or not'\n\t    ),\n\t    '*WIP*',\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      'Scenario #3 - I want to transform the value inside the Maybe'\n\t    ),\n\t    '*WIP*',\n\t    _react2.default.createElement(\n\t      'h3',\n\t      null,\n\t      'Scenario #4 - I work with arrays a lot, are there any methods to help me with that?'\n\t    ),\n\t    '*WIP*'\n\t  );\n\t};\n\t\n\texports.default = MaybeApiGuide;\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-guides-maybe-api-guide-js-1e9a093b21bc46cb86e2.js","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Layout from '../../components/layout'\r\nimport HL from '../../components/HL'\r\nimport SyntaxHighlighter from 'react-syntax-highlighter'\r\nimport highlightStyle from 'react-syntax-highlighter/styles/hljs/googlecode'\r\n\r\nconst Note = styled.div`\r\n  display: inline-block;\r\n  background-color: #fcf4cd;\r\n  border: 0 solid #f7e070;\r\n  border-left-width: 8px;\r\n  padding: 10px;\r\n  margin: 10px 0;\r\n`\r\n\r\nconst MethodName = styled.a`\r\n  font-size: 17px;\r\n  font-weight: bold;\r\n  color: #3b74d7;\r\n  margin-top: 5px;\r\n  display: inline-block;\r\n  text-decoration: none;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`\r\n\r\nconst MaybeApiGuide = props => (\r\n  <Layout location={props.location}>\r\n    <h1>Which Maybe method am I supposed to use now? (API guide)</h1>\r\n    We've all been in that research phase where we're still learning the API of\r\n    library and deciding if it suits our usecases. <br />\r\n    The purpose of this guide is to make that process easier by grouping all\r\n    available methods for the Maybe data type.\r\n    <h3>\r\n      Scenario #1 - I want to use Maybe but my codebase already has\r\n      null/undefined all over the place\r\n    </h3>\r\n    One of purify's main goals is great interoperability with existing code.\r\n    That is why the API for Maybe is rich in utility methods for working with\r\n    nullable values. <br />\r\n    <Note>\r\n      One might question the usage of Maybe (and purify) if you are still going\r\n      to use nulls, there are already a lot of utility libraries like ramda and\r\n      lodash that allow you to do that. <br />\r\n      With purify you can start using ubiquitous data structures that come with\r\n      a lot of literature and examples in various programming languages <br />\r\n      without sacrificing coding style or ease of interop, that's why using it\r\n      instead of other libraries might be a good idea.\r\n    </Note>\r\n    <br />\r\n    <MethodName href=\"/adts/Maybe/#fromNullable\">\r\n      Maybe.fromNullable\r\n    </MethodName>{' '}\r\n    / <MethodName href=\"/adts/Maybe/#fromFalsy\">Maybe.fromFalsy</MethodName> /{' '}\r\n    <MethodName href=\"/adts/Maybe/#fromPredicate\">\r\n      Maybe.fromPredicate\r\n    </MethodName>{' '}\r\n    / <MethodName href=\"/adts/Maybe/#encase\">Maybe.encase</MethodName>\r\n    <br />\r\n    These methods allow you to construct Maybe values from, as the names\r\n    suggest, nullable and falsy values or in the case of the `encase` method -\r\n    from a function that may throw an exception. <br />\r\n    `fromPredicate` is on the list because it can be used to cover all kinds of\r\n    complicated checks, for example:\r\n    <SyntaxHighlighter language=\"javascript\" style={highlightStyle}>\r\n      {`const _ = Maybe.fromPredicate(x => x && x.length > 0, value)`}\r\n    </SyntaxHighlighter>\r\n    <MethodName href=\"/adts/Maybe/#chainNullable\">chainNullable</MethodName>\r\n    <br />\r\n    Now that you have constructed your Maybe out of an optional value, you may\r\n    want to transform it with a function that returns yet another optional\r\n    value. <br />\r\n    If you are already familiar with the <HL>chain</HL> method (a.k.a.{' '}\r\n    <HL>bind</HL>, <HL>flatMap</HL> or <HL>>>=</HL>) you may think of using it\r\n    in combination with any of the methods mentioned above: <br />\r\n    <SyntaxHighlighter language=\"javascript\" style={highlightStyle}>\r\n      {`myMaybe.chain(x => Maybe.fromNullable(transform(x)))`}\r\n    </SyntaxHighlighter>\r\n    There's nothing wrong with that approach, but there's a helper method called\r\n    `chainNullable` that does exactly the same thing <br />\r\n    without you having to manually construct a Maybe out of the return value of\r\n    the transformation function. <br />\r\n    <SyntaxHighlighter language=\"javascript\" style={highlightStyle}>\r\n      {`myMaybe.chainNullable(x => transform(x))\r\n// or just straight up\r\nmyMaybe.chainNullable(transform)`}\r\n    </SyntaxHighlighter>\r\n    <MethodName href=\"/adts/Maybe/#extract\">extract</MethodName> /{' '}\r\n    <MethodName href=\"/adts/Maybe/#extractNullable\">extractNullable</MethodName>{' '}\r\n    / <MethodName href=\"/adts/Maybe/#unsafeCoerce\">unsafeCoerce</MethodName>\r\n    <br />\r\n    Sometimes you have to interact with code that expects a nullable value, in\r\n    that case you can just unwrap a Maybe down to a primitive value like null or\r\n    undefined using the methods above. <br />\r\n    <Note>\r\n      Please note that while you may be tempted to wrap and unwrap manually\r\n      every time you encounter a nullable value, <br />\r\n      consider that code designed with Maybe in mind is easier to maintain and\r\n      use in the long term. <br />\r\n      Try to keep usage of the methods mentioned in this part of the guide low\r\n      and only for compatibility reasons. <br />\r\n      Don't be afraid to start returning or expecing Maybe values in functions,\r\n      you'll notice some benefits you haven't considered before!\r\n    </Note>\r\n    <h3>Scenario #2 - I'm not sure how to check if a value exists or not</h3>\r\n    *WIP*\r\n    <h3>Scenario #3 - I want to transform the value inside the Maybe</h3>\r\n    *WIP*\r\n    <h3>\r\n      Scenario #4 - I work with arrays a lot, are there any methods to help me\r\n      with that?\r\n    </h3>\r\n    *WIP*\r\n  </Layout>\r\n)\r\n\r\nexport default MaybeApiGuide\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/guides/maybe-api-guide.js"],"sourceRoot":""}